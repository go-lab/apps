{"version":3,"sources":["poll_repo.js"],"names":[],"mappings":";;AAAA,CAAC,UAAS,cAAc,EAAE;AACtB,QAAM,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;AACjC,QAAM,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;;AAEjC,kBAAc,CAAC,QAAQ,GACvB,SAAS,QAAQ,CAAC,cAAc,EAAE;AAC9B,YAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;AAClC,iCAAyB,EAAE,CAAC;;AAE5B,eAAO;AACH,gBAAI,EAAE,IAAI;AACV,gBAAI,EAAE,IAAI;SACb,CAAC;;AAEF,iBAAS,IAAI,GAAG;AACZ,mBAAO,cAAc,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAS,QAAQ,EAAE;AACxE,oBAAI,QAAQ,KAAK,IAAI,EAAE;AACnB,2BAAO,WAAW,EAAE,CAAC;iBACxB;AACD,uBAAO,gBAAgB,CAAC,QAAQ,CAAC,CAAC;aACrC,CAAC,SAAM,CAAC,kBAAkB,CAAC,CAAC;SAChC;;AAED,iBAAS,IAAI,CAAC,IAAI,EAAE;AAChB,mBAAO,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CACrE,IAAI,CAAC,YAAW;;aAEhB,CAAC,SACI,CAAC,kBAAkB,CAAC,CAAC;SAC9B;;AAED,iBAAS,WAAW,GAAG;AACnB,mBAAO,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC,CAC/D,IAAI,CAAC,UAAS,QAAQ,EAAE;AACrB,uBAAO,gBAAgB,CAAC,QAAQ,CAAC,CAAC;aACrC,CAAC,CAAC;SACN;;AAED,iBAAS,kBAAkB,CAAC,KAAK,EAAE;AAC/B,gBAAI,KAAK,CAAC,KAAK,EAAE;AACb,sBAAM,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAChC,MAAM;AACH,sBAAM,KAAK,CAAC;aACf;SACJ;;AAED,iBAAS,gBAAgB,CAAC,QAAQ,EAAE;AAChC,mBAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SAC7E;;AAED,iBAAS,yBAAyB,GAAG;AACjC,0BAAc,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;SAC7D;KACJ,CAAC;CACL,CAAA,CAAE,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC","file":"poll_repo.js","sourcesContent":["(function(ReflectionPoll) {\n    const util = ReflectionPoll.util;\n    const Poll = ReflectionPoll.Poll;\n\n    ReflectionPoll.PollRepo =\n    function PollRepo(storageHandler) {\n        util.promisifyAll(storageHandler);\n        filterOnlyForResourceType();\n\n        return {\n            load: load,\n            save: save\n        };\n\n        function load() {\n            return storageHandler.readLatestResourceAsync(null).then(function(resource) {\n                if (resource === null) {\n                    return saveNewPoll();\n                }\n                return pollFromResource(resource);\n            }).catch(handleStorageError);\n        }\n\n        function save(poll) {\n            return storageHandler.updateResourceAsync(poll.get('id'), poll.toJS())\n            .then(function() {\n                // do nothing\n            })\n            .catch(handleStorageError);\n        }\n\n        function saveNewPoll() {\n            return storageHandler.createResourceAsync(Poll.newPoll().toJS())\n            .then(function(resource) {\n                return pollFromResource(resource);\n            });\n        }\n\n        function handleStorageError(error) {\n            if (error.error) {\n                throw new Error(error.error);\n            } else {\n                throw error;\n            }\n        }\n\n        function pollFromResource(resource) {\n            return Immutable.fromJS(resource.content).set('id', resource.metadata.id);\n        }\n\n        function filterOnlyForResourceType() {\n            storageHandler.configureFilters(true, false, false, true);\n        }\n    };\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}