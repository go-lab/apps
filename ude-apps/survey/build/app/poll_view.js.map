{"version":3,"sources":["poll_view.js"],"names":[],"mappings":"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","file":"poll_view.js","sourcesContent":["(function (ReflectionPoll) {\n    const { util, Poll, PubSub } = ReflectionPoll;\n    const answersChangeEvents = PubSub();\n\n    const SingleChoiceAnswers = React.createClass({\n        displayName: 'SingleChoiceAnswers',\n        render() {\n            return <div>{this.renderAnswers()}</div>;\n        },\n        renderAnswers() {\n            return this.props.item.get('answers').map((answer) => {\n                return (\n                    <div className='radio' key={answer.get('id')}>\n                        <label>\n                            <input\n                                type='radio'\n                                name={this.props.item.get('id')}\n                                value={answer.get('id')}\n                                checked={answer.get('id') === this.props.givenAnswer}\n                                onChange={this.onChange}\n                            />\n                            {answer.get('text')}\n                        </label>\n                    </div>\n                );\n            });\n        },\n        onChange(event) {\n            if (!event.target.checked) return;\n            this.props.action(\n                'onSingleChoiceAnswerSelect',\n                this.props.item.get('id'),\n                event.target.value\n            );\n        }\n    });\n\n    const MultipleChoiceAnswers = React.createClass({\n        displayName: 'MultipleChoiceAnswers',\n        render() {\n            return <div>{this.renderAnswers()}</div>;\n        },\n        renderAnswers() {\n            return this.props.item.get('answers').map((answer) => {\n                return (\n                    <div className='checkbox' key={answer.get('id')}>\n                        <label>\n                            <input\n                                type='checkbox'\n                                name={this.props.item.get('id')}\n                                onChange={this.onChange}\n                                value={answer.get('id')}\n                                checked={this.isChecked(answer)}\n                            />\n                            {answer.get('text')}\n                        </label>\n                    </div>\n                );\n            });\n        },\n        onChange(event) {\n            let actionName = 'onAddMultipleChoiceAnswer';\n            if (!event.target.checked) {\n                actionName = 'onRemoveMultipleChoiceAnswer';\n            }\n            this.props.action(\n                actionName,\n                this.props.item.get('id'),\n                event.target.value\n            );\n        },\n        isChecked(answer) {\n            return this.props.givenAnswer.has(answer.get('id'));\n        },\n    });\n\n    const SmileyAnswers = React.createClass({\n        displayName: 'SmileyAnswers',\n        render() {\n            return <div>{this.renderAnswers()}</div>;\n        },\n        renderAnswers() {\n            return Poll.getSmileyValues().map((smiley) => {\n                let smileySrc =\n                    `${this.props.imgPath}/smiley_${smiley}.png`;\n                return (\n                    <div className='radio' key={smiley}>\n                        <label>\n                            <input\n                                type='radio'\n                                name={this.props.item.get('id')}\n                                onChange={this.onChange}\n                                value={smiley}\n                                checked={this.isChecked(smiley)}\n                            />\n                            <img src={smileySrc}/>\n                        </label>\n                    </div>\n                );\n            });\n        },\n        onChange(event) {\n            if (!event.target.checked) return;\n            this.props.action(\n                'onSmileyAnswerSelect',\n                this.props.item.get('id'),\n                event.target.value\n            );\n        },\n        isChecked(smiley) {\n            return this.props.givenAnswer === smiley;\n        }\n    });\n\n    const LikertScaleAnswers = React.createClass({\n        displayName: 'LikertScaleAnswers',\n        render() {\n            return <div>{this.renderAnswers()}</div>;\n        },\n        renderAnswers() {\n            return Poll.getLikertScale().map((smiley) => {\n                return (\n                    <div className='radio' key={smiley}>\n                        <label>\n                            <input\n                                type='radio'\n                                name={this.props.item.get('id')}\n                                onChange={this.onChange}\n                                value={smiley}\n                                checked={this.isChecked(smiley)}\n                            />\n                            <span>{smiley}</span>\n                        </label>\n                    </div>\n                );\n            });\n        },\n        onChange(event) {\n            if (!event.target.checked) return;\n            this.props.action(\n                'onLikertScaleAnswerSelect',\n                this.props.item.get('id'),\n                event.target.value\n            );\n        },\n        isChecked(smiley) {\n            return this.props.givenAnswer === smiley;\n        }\n    });\n\n    /*const LikertScaleAnswers = React.createClass({\n        displayName: 'LikertScaleAnswers',\n        render() {\n            return <div>{this.renderAnswers()}</div>;\n        },\n        renderAnswers() {\n            return Poll.getLikertScale().map((scaleItem) => {\n                console.log(\"SCALEITEM: \"+scaleItem);\n                return (\n                    <div className='radio' key={scaleItem.get('id')}>\n                        <label>\n                            <input\n                                type='radio'\n                                name={this.props.item.get('id')}\n                                onChange={this.onChange}\n                                value={scaleItem}\n                                checked={scaleItem.get('id') === this.props.givenAnswer}\n                            />\n                            <span>{scaleItem.get('text')}</span>\n                        </label>\n                    </div>\n                );\n            });\n        },\n        onChange(event) {\n            if (!event.target.checked) return;\n            this.props.action(\n                'onLikertScaleAnswerSelect',\n                this.props.item.get('id'),\n                event.target.value\n            );\n        },\n        isChecked(item) {\n            return this.props.givenAnswer === item;\n        }\n    });*/\n\n    const OpenAnswer = React.createClass({\n        displayName: 'OpenAnswer',\n        render() {\n            const itemId = this.props.item.get('id');\n            return (\n                <textarea\n                    className='form-control'\n                    id={itemId}\n                    onChange={this.onChange}\n                    value={this.props.givenAnswer}\n                />\n            );\n        },\n        onChange(event) {\n            this.props.action(\n                'onOpenAnswerChange',\n                this.props.item.get('id'),\n                event.target.value\n            );\n        }\n    });\n\n    const answerComponentsForType = Immutable.Map({\n        'single-choice': SingleChoiceAnswers,\n        'multiple-choice': MultipleChoiceAnswers,\n        'open': OpenAnswer,\n        'smiley': SmileyAnswers,\n        'likert-scale': LikertScaleAnswers,\n    });\n\n    const Item = React.createClass({\n        displayName: 'Item',\n        render() {\n            return (\n                <div className={`form-group ${this.props.item.get('type')}`}>\n                    {this.renderQuestion()}\n                    {this.renderAnswer()}\n                </div>\n            );\n        },\n        renderQuestion() {\n            return (\n                <label htmlFor={this.props.item.get('id')}>\n                    {this.props.item.get('question')}\n                </label>\n            );\n        },\n        renderAnswer() {\n            const { item } = this.props;\n            const Component = answerComponentsForType.get(this.props.item.get('type'));\n            return (\n                <Component\n                    item={item}\n                    action={this.props.action}\n                    givenAnswer={this.props.givenAnswers.get(item.get('id'))}\n                    imgPath={this.props.imgPath}\n                />\n            );\n        },\n    });\n\n    const PollView = React.createClass({\n        displayName: 'PollView',\n        render() {\n            return (\n                <div id='poll'>\n                    {this.renderHeading()}\n                    {this.renderItems()}\n                </div>\n            );\n        },\n        renderHeading() {\n            return <div><h2>{ this.props.state.getIn(['poll', 'heading']) }</h2></div>;\n        },\n        renderItems() {\n            let items = this.props.state.getIn(['poll', 'items']);\n            if (items.count() === 0) {\n                return <div><p>{this.props.getMsg('no_items_yet')}</p></div>;\n            }\n            return items.map((item) => {\n                return (\n                    <Item\n                        key={item.get('id')}\n                        item={item}\n                        givenAnswers={this.props.state.get('givenAnswers')}\n                        getMsg={this.props.getMsg}\n                        imgPath={this.props.imgPath}\n                        action={this.props.action}\n                    />\n                );\n            });\n        }\n    });\n\n    const setAnswer = (state, itemId, value) => {\n        return state.update('givenAnswers', (answers) => {\n            return answers.set(itemId, value);\n        });\n    };\n\n    ReflectionPoll.PollView = function (container, getMsg, imgPath) {\n        const actions = Immutable.Map({\n            onSmileyAnswerSelect: setAnswer,\n            onLikertScaleAnswerSelect: setAnswer,\n            onSingleChoiceAnswerSelect: setAnswer,\n            onOpenAnswerChange: setAnswer,\n            onAddMultipleChoiceAnswer(state, itemId, answerId) {\n                return state.update('givenAnswers', Immutable.Set(), (answers) => {\n                    return answers.update(itemId, Immutable.Set(), (mcAnswers) => {\n                        return mcAnswers.add(answerId);\n                    });\n                });\n            },\n            onRemoveMultipleChoiceAnswer(state, itemId, answerId) {\n                return state.update('givenAnswers', Immutable.Set(), (answers) => {\n                    return answers.update(itemId, Immutable.Set(), (mcAnswers) => {\n                        return mcAnswers.remove(answerId);\n                    });\n                });\n            },\n        });\n\n        const render = (state) => {\n            console.log('rendering poll with state %O', state.toJS());\n            answersChangeEvents.publish(state.get('givenAnswers'));\n            React.render(\n                React.createElement(PollView, {\n                    state,\n                    getMsg,\n                    imgPath: imgPath,\n                    action: util.actionHandler.bind(null, state, actions, render)\n                }),\n                container\n            );\n        };\n\n        return {\n            render: function (poll, answers) {\n                answers =\n                    ReflectionPoll.Poll.getAnswers(poll, answers);\n\n                const state = Immutable.Map({\n                    givenAnswers: answers,\n                    poll,\n                });\n                render(state);\n            },\n            show: function () {\n                container.style.display = 'block';\n            },\n            hide: function () {\n                container.style.display = 'none';\n            },\n            onAnswersChange: answersChangeEvents.subscribe,\n        };\n    };\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}