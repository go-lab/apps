{"version":3,"sources":["poll.js"],"names":[],"mappings":"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","file":"poll.js","sourcesContent":["((ReflectionPoll) => {\n    const { Map: IMap, List: IList } = Immutable;\n    const util = ReflectionPoll.util;\n\n    // defines the version of the poll data structure. Increment this\n    // version when backwards incompatible changes are made to the poll data\n    // structure\n    const DATA_VERSION = 1;\n    const ITEM_TYPESPECS = IMap({\n        'single-choice': IMap({\n            hasPredefinedAnswers: true,\n            labelKey: 'single_choice_question',\n            defaultAnswer: null,\n        }),\n        'multiple-choice': IMap({\n            hasPredefinedAnswers: true,\n            labelKey: 'multiple_choice_question',\n            defaultAnswer: Immutable.Set(),\n        }),\n        'open': IMap({\n            hasPredefinedAnswers: false,\n            labelKey: 'open_question',\n            defaultAnswer: '',\n        }),\n        'smiley': IMap({\n            hasPredefinedAnswers: false,\n            labelKey: 'smiley_question',\n            defaultAnswer: null,\n        }),\n        'likert-scale': IMap({\n            hasPredefinedAnswers: false,\n            labelKey: 'likert_scale_question',\n            defaultAnswer: null,\n        }),\n    });\n\n    const SMILEY_VALUES = Immutable.List([\n        'angry',\n        'disappointed',\n        'neutral',\n        'satisfied',\n        'happy'\n    ]);\n\n    const LIKERT_5_SCALE = Immutable.List([\n        '1',\n        '2',\n        '3',\n        '4',\n        '5'\n    ]);\n\n    const assertTypeDefined = (itemType) => {\n        let spec = ITEM_TYPESPECS.get(itemType);\n        assert(spec, 'Undefined item type \"' + itemType + '\".');\n    };\n\n    const listSwap = (list, index1, index2) => {\n        let item1 = list.get(index1);\n        let item2 = list.get(index2);\n        return list.set(index1, item2).set(index2, item1);\n    };\n\n    const answersString = (answers) => {\n        return answers.reduce((string, answer) => {\n            return string + answer.get('text');\n        }, '');\n    };\n\n    const itemsString = (items) => {\n        return items.reduce((string, item) => {\n            return string +\n                item.get('question') +\n                item.get('type') +\n                answersString(item.get('answers', Immutable.Set()));\n        }, '');\n    };\n\n    const Poll = {\n        defaultQuestion: 'New Question',\n        defaultAnswerText: 'Answer',\n        defaultPollHeading: 'New poll',\n        newPoll() {\n            return IMap({\n                heading: Poll.defaultPollHeading,\n                items: IList(),\n                appVersion: DATA_VERSION,\n            });\n        },\n        newItem(type, question, answers) {\n            let item = Immutable.Map({\n                id: util.uuid(),\n                type: type,\n                question: question || Poll.defaultQuestion,\n            });\n            if (Poll.itemHasUserSpecifiedAnswers(type)) {\n                if (answers === undefined) {\n                    answers = IList([\n                        Poll.newAnswer(Poll.defaultAnswerText + ' 1'),\n                        Poll.newAnswer(Poll.defaultAnswerText + ' 2'),\n                    ]);\n                } else {\n                    answers = IList(answers);\n                }\n                item = item.set('answers', answers);\n            }\n            return item;\n        },\n        newAnswer(text) {\n            if (text === undefined) {\n                text = Poll.defaultAnswerText;\n            }\n            return IMap({ id: util.uuid(), text: text });\n        },\n        addItem(poll, type, question, answers) {\n            return poll.update('items', function(items) {\n                return items.push(Poll.newItem(type, question, answers));\n            });\n        },\n        removeItem(poll, itemId) {\n            return poll.update('items', function(items) {\n                return items.filterNot(function(item) {\n                    return item.get('id') === itemId;\n                });\n            });\n        },\n        moveItemUp(poll, itemId) {\n            return poll.update('items', function(items) {\n                const index = items.findIndex(function(item) {\n                    return item.get('id') === itemId;\n                });\n                const alreadyOnTop = index === 0;\n                if (alreadyOnTop) {\n                    return items;\n                }\n                return listSwap(items, index, index - 1);\n            });\n        },\n        moveItemDown(poll, itemId) {\n            return poll.update('items', function(items) {\n                const index = items.findIndex(function(item) {\n                    return item.get('id') === itemId;\n                });\n                const lastIndex = items.count() - 1;\n                const alreadyAtTheBottom = index === lastIndex;\n                if (alreadyAtTheBottom) {\n                    return items;\n                }\n                return listSwap(items, index, index + 1);\n            });\n        },\n        setQuestion(poll, itemId, question) {\n            return Poll.updateItem(poll, itemId, function(item) {\n                return item.set('question', question);\n            });\n        },\n        setAnswers(poll, itemId, answers) {\n            return Poll.updateItem(poll, itemId, function(item) {\n                return item.set('answers', answers);\n            });\n        },\n        updateItem(poll, itemId, updater) {\n            return poll.update('items', function(items) {\n                const index = items.findIndex(function(item) {\n                    return item.get('id') === itemId;\n                });\n                return items.update(index, updater);\n            });\n        },\n        itemHasUserSpecifiedAnswers(itemType) {\n            assertTypeDefined(itemType);\n            return ITEM_TYPESPECS.getIn([itemType, 'hasPredefinedAnswers']);\n        },\n        getAnswers(poll, givenAnswers=IMap()) {\n            return poll.get('items').reduce((answers, item) => {\n                return answers.update(item.get('id'), (answer) => {\n                    return answer || Poll.getItemDefaultAnswer(item.get('type'));\n                });\n            }, givenAnswers);\n        },\n        getItemDefaultAnswer(itemType) {\n            assertTypeDefined(itemType);\n            return Poll.getItemTypeSpec(itemType).get('defaultAnswer');\n        },\n        getItemTypeSpec(itemType) {\n            assertTypeDefined(itemType);\n            return ITEM_TYPESPECS.get(itemType);\n        },\n        getItemTypeSpecs() {\n            return ITEM_TYPESPECS;\n        },\n        getItemTypeLabelKey(itemType) {\n            return Poll.getItemTypeSpec(itemType).get('labelKey');\n        },\n        setContentHash(poll) {\n            const contentString = poll.get('heading') +\n                itemsString(poll.get('items'));\n            return poll.set('contentHash', util.sha256(contentString));\n        },\n        addAnswerState(poll) {\n            return poll.update('items', (item) => {\n                if (!Poll.itemHasUserSpecifiedAnswers(item.get('type'))) {\n                    return item.set('givenAnswer', '');\n                }\n                return item.update('answers', (answers) => {\n                    return answers.map((answer) => answer.set('selected', false));\n                });\n            });\n        },\n        mergePolls(poll1, poll2) {\n            return poll1\n            .update('items', (items) => {\n                return items.concat(poll2.get('items'));\n            })\n            .update('heading', (heading) => {\n                if (heading === Poll.defaultPollHeading) {\n                    return poll2.get('heading', Poll.defaultPollHeading);\n                }\n                return heading;\n            });\n        },\n        answersFromJSToImmutable(poll, answers) {\n            answers = Immutable.fromJS(answers);\n            poll.get('items').forEach((item) => {\n                answers = answers.update(item.get('id'), (answer) => {\n                    return correctAnswerType(item, answer);\n                });\n            });\n            return answers;\n        },\n        getSmileyValues() {\n            return SMILEY_VALUES;\n        },\n        getLikertScale() {\n            return LIKERT_5_SCALE;\n        }\n    };\n\n    function correctAnswerType(item, answer) {\n        const spec = Poll.getItemTypeSpec(item.get('type'));\n        if (Immutable.Set.isSet(spec.get('defaultAnswer'))) {\n            if (answer === undefined) {\n                return Immutable.Set();\n            }\n            return answer.toSet();\n        }\n        return answer;\n    }\n\n    ReflectionPoll.Poll = Poll;\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}