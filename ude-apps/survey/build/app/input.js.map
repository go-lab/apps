{"version":3,"sources":["input.js"],"names":[],"mappings":";;AAAA,CAAC,UAAS,cAAc,EAAE;AACtB,kBAAc,CAAC,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC;AACrC,mBAAW,EAAE,OAAO;AACpB,uBAAe,EAAE,2BAAW;AACxB,mBAAO;AACH,oBAAI,EAAE,MAAM;AACZ,kBAAE,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE;AAC9B,wBAAQ,EAAE,oBAAW,EAAE;AACvB,sBAAM,EAAE,kBAAW,EAAE;aACxB,CAAC;SACL;AACD,cAAM,EAAE,kBAAW;AACf,mBACI;;kBAAK,SAAS,EAAC,YAAY;gBACtB,IAAI,CAAC,WAAW,EAAE;gBAClB,IAAI,CAAC,WAAW,EAAE;aACjB,CACR;SACL;AACD,mBAAW,EAAE,uBAAW;AACpB,mBAAO;;kBAAO,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,AAAC;gBAAE,IAAI,CAAC,KAAK,CAAC,KAAK;aAAS,CAAC;SACpE;AACD,mBAAW,EAAE,uBAAW;AACpB,gBAAI,KAAK,GAAG;AACR,yBAAS,EAAE,cAAc;AACzB,kBAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;AACjB,qBAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;AACvB,wBAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;AAC7B,sBAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;aAC5B,CAAC;AACF,gBAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;AAChC,uBAAO,gCAAc,KAAK,CAAI,CAAC;aAClC,MAAM;AACH,qBAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;AAC7B,uBAAO,6BAAW,KAAK,CAAI,CAAC;aAC/B;SACJ;KACJ,CAAC,CAAC;CACN,CAAA,CAAE,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC","file":"input.js","sourcesContent":["(function(ReflectionPoll) {\n    ReflectionPoll.Input = React.createClass({\n        displayName: 'Input',\n        getDefaultProps: function() {\n            return {\n                type: 'text',\n                id: ReflectionPoll.util.uuid(),\n                onChange: function() {},\n                onBlur: function() {},\n            };\n        },\n        render: function() {\n            return (\n                <div className='form-group'>\n                    {this.renderLabel()}\n                    {this.renderInput()}\n                </div>\n            );\n        },\n        renderLabel: function() {\n            return <label htmlFor={this.props.id}>{this.props.label}</label>;\n        },\n        renderInput: function() {\n            let props = {\n                className: 'form-control',\n                id: this.props.id,\n                value: this.props.value,\n                onChange: this.props.onChange,\n                onBlur: this.props.onBlur,\n            };\n            if (this.props.type === 'textarea') {\n                return <textarea {...props} />;\n            } else {\n                props.type = this.props.type;\n                return <input {...props} />;\n            }\n        }\n    });\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}