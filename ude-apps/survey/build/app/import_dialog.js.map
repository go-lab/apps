{"version":3,"sources":["import_dialog.js"],"names":[],"mappings":";;AAAA,CAAC,UAAS,cAAc,EAAE;AACtB,kBAAc,CAAC,YAAY,GAC3B,SAAS,YAAY,CAAC,MAAM,EAAE;AAC1B,YAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACrD,YAAM,YAAY,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC;AAC7C,YAAI,aAAa,YAAA,CAAC;;AAElB,aAAK,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAC/C,aAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;;AAE5B,eAAO;AACH,gBAAI,EAAE,gBAAW;AACb,oBAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAClE,6BAAa,GAAG,gBAAgB,EAAE,CAAC;AACnC,qBAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;AACjE,qBAAK,CAAC,IAAI,EAAE,CAAC;aAChB;AACD,oBAAQ,EAAE,YAAY,CAAC,SAAS;SACnC,CAAC;;AAEF,iBAAS,gBAAgB,GAAG;AACxB,mBAAO,CAAC,CAAC,cAAc,CAAC,CACvB,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;SAClC;;AAED,iBAAS,QAAQ,GAAG;AAChB,gBAAM,SAAS,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;AACnC,uBAAO,EAAE,iBAAiB;aAC7B,CAAC,CACD,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CACxB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAExB,gBAAM,SAAS,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;AACnC,uBAAO,EAAE,iBAAiB;aAC7B,CAAC,CACD,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC,CAC1B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;;AAE7B,mBAAO,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;SACtD;;AAED,iBAAS,aAAa,GAAG;AACrB,iBAAK,CAAC,KAAK,EAAE,CAAC;AACd,wBAAY,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;SACvC;;AAED,iBAAS,WAAW,GAAG;AACnB,gBAAI,CAAC,aAAa,EAAE;AAChB,sBAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;aAC/D;AACD,mBAAO,aAAa,CAAC,GAAG,EAAE,CAAC;SAC9B;KACJ,CAAC;CACL,CAAA,CAAE,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC","file":"import_dialog.js","sourcesContent":["(function(ReflectionPoll) {\n    ReflectionPoll.ImportDialog =\n    function ImportDialog(getMsg) {\n        const modal = ReflectionPoll.Modal('import', getMsg);\n        const importEvents = ReflectionPoll.PubSub();\n        let pollDataInput;\n\n        modal.setHeading(getMsg('export_poll_config'));\n        modal.setFooter(getTools());\n\n        return {\n            show: function() {\n                const explanation = $('<p />').text(getMsg('import_explanation'));\n                pollDataInput = getPollDataInput();\n                modal.setBody($('<div />').append([explanation, pollDataInput]));\n                modal.open();\n            },\n            onImport: importEvents.subscribe,\n        };\n\n        function getPollDataInput() {\n            return $('<textarea />')\n            .attr('class', 'form-control');\n        }\n\n        function getTools() {\n            const cancelBtn = $('<button />').attr({\n                'class': 'btn btn-default',\n            })\n            .on('click', modal.close)\n            .text(getMsg('cancel'));\n\n            const importBtn = $('<button />').attr({\n                'class': 'btn btn-primary',\n            })\n            .on('click', onImportClick)\n            .text(getMsg('import_poll'));\n\n            return $('<div />').append([cancelBtn, importBtn]);\n        }\n\n        function onImportClick() {\n            modal.close();\n            importEvents.publish(getPollData());\n        }\n\n        function getPollData() {\n            if (!pollDataInput) {\n                throw new Error('Poll data import input not rendered yet.');\n            }\n            return pollDataInput.val();\n        }\n    };\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}