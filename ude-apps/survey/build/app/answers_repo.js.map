{"version":3,"sources":["answers_repo.js"],"names":[],"mappings":"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","file":"answers_repo.js","sourcesContent":["((ReflectionPoll) => {\n    const { util, Poll } = ReflectionPoll;\n\n    ReflectionPoll.AnswersRepo =\n    function AnswersRepo(storageHandler) {\n        util.promisifyAll(storageHandler);\n\n        return {\n            load: load,\n            save: save\n        };\n\n        function load(poll) {\n            return storageHandler.readLatestResourceAsync(null).then(function(resource) {\n                if (resource !== null) {\n                    if (resourceMatchesPoll(poll, resource)) {\n                        return answersFromResource(poll, resource);\n                    }\n                }\n                return saveNewAnswers(poll);\n            }).then((answers) => {\n                return removeStaleAnswers().return(answers);\n            }).catch(handleStorageError);\n        }\n\n        function save(poll, answers) {\n            answers = answers\n            .set('pollId', poll.get('id'))\n            .set('pollContentHash', poll.get('contentHash'));\n            return storageHandler.updateResourceAsync(answers.get('id'), answers.toJS())\n            .then(function() {\n                // do nothing\n            })\n            .catch(handleStorageError);\n        }\n\n        function saveNewAnswers(poll) {\n            const defaultAnswers = Poll.getAnswers(poll)\n            .set('pollContentHash', poll.get('contentHash'))\n            .toJS();\n            return storageHandler.createResourceAsync(defaultAnswers).then(function(resource) {\n                return answersFromResource(poll, resource);\n            });\n        }\n\n        function removeStaleAnswers() {\n            return Promise.all([\n                storageHandler.readLatestResourceAsync(null),\n                storageHandler.listResourceMetaDatasAsync()\n            ]).spread((latestResource, resources) => {\n                const deletions = resources\n                .map(({ metadata }) => {\n                    return {\n                        id: metadata.id,\n                        published: new Date(metadata.published)\n                    };\n                })\n                .filter((m) => m.id !== latestResource.metadata.id)\n                .map((m) => null);\n\t\treturn Promise.all(deletions);\n            }).catch(handleStorageError);\n        }\n\n        function handleStorageError(error) {\n            if (error.error) {\n                throw new Error(error.error);\n            } else {\n                throw error;\n            }\n        }\n\n        function answersFromResource(poll, resource) {\n            return Poll\n            .answersFromJSToImmutable(poll, resource.content)\n            .set('id', resource.metadata.id);\n        }\n\n        function resourceMatchesPoll(poll, resource) {\n            return poll.get('contentHash') === resource.content.pollContentHash;\n        }\n    };\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}