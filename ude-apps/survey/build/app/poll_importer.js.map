{"version":3,"sources":["poll_importer.js"],"names":[],"mappings":";;AAAA,CAAC,UAAS,cAAc,EAAE;AACtB,kBAAc,CAAC,YAAY,GAAG;AAC1B,eAAO,EAAE,iBAAS,aAAa,EAAE,aAAa,EAAE;AAC5C,gBAAI,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC;AAC3B,qBAAK,EAAE,IAAI;AACX,oBAAI,EAAE,IAAI;AACV,2BAAW,EAAE,KAAK;aACrB,CAAC,CAAC;AACH,gBAAI,YAAY,YAAA,CAAC;;AAEjB,gBAAI;AACA,4BAAY,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;aAC9D,CAAC,OAAM,KAAK,EAAE;AACX,uBAAO,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAC3C;;AAED,wBAAY,GAAG,aAAa,CACxB,aAAa,EAAE,YAAY,CAC9B,CAAC;AACF,gBAAM,WAAW,GAAG,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,GAC9B,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;;AAEpD,wBAAY,GAAG,YAAY,CAC1B,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAClD,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEpC,mBAAO,UAAU,CAChB,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CACzB,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;SACpC;KACJ,CAAC;;AAEF,aAAS,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE;AAC/B,eAAO,IAAI,CAAC,GAAG,CAAC,UAAS,KAAK,EAAE,GAAG,EAAE;AACjC,mBAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC/B,CAAC,CAAC;KACN;CACJ,CAAA,CAAE,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC","file":"poll_importer.js","sourcesContent":["(function(ReflectionPoll) {\n    ReflectionPoll.PollImporter = {\n        convert: function(newPollString, referencePoll) {\n            let conversion = Immutable.Map({\n                error: null,\n                poll: null,\n                isDowngrade: false,\n            });\n            let importedPoll;\n\n            try {\n                importedPoll = Immutable.fromJS(JSON.parse(newPollString));\n            } catch(error) {\n                return conversion.set('error', 'parse');\n            }\n\n            importedPoll = mergeSameKeys(\n                referencePoll, importedPoll\n            );\n            const isDowngrade = importedPoll.get('appVersion') >\n                                referencePoll.get('appVersion');\n\n            importedPoll = importedPoll\n            .set('appVersion', referencePoll.get('appVersion'))\n            .set('id', referencePoll.get('id'));\n\n            return conversion\n            .set('poll', importedPoll)\n            .set('isDowngrade', isDowngrade);\n        }\n    };\n\n    function mergeSameKeys(map1, map2) {\n        return map1.map(function(value, key) {\n            return map2.get(key, value);\n        });\n    }\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}