{"version":3,"sources":["results_view.js"],"names":[],"mappings":"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","file":"results_view.js","sourcesContent":["((ReflectionPoll) => {\n    const { Poll } = ReflectionPoll;\n\n    const maxCount = (labeledCounts) => {\n        return labeledCounts.map((c) => c.get('count')).max();\n    };\n\n    const AnswerCountBarChart = React.createClass({\n        displayName: 'AnswerCountBarChart',\n        render() {\n            return <svg ref='canvas'></svg>;\n        },\n        componentDidMount() {\n            this.update();\n        },\n        componentDidUpdate() {\n            this.update();\n        },\n        update() {\n            const { values, answers } = this.props;\n            nv.addGraph(() => {\n                return this.createChart(this.labeledAnswerCounts(answers, values));\n            });\n        },\n        createChart(labeledCounts) {\n            const { getMsg } = this.props;\n            const chart = nv.models.discreteBarChart()\n            .x((d) => d.get('label'))\n            .y((d) => d.get('count'))\n            .staggerLabels(true)\n            .showValues(false)\n            .duration(250);\n\n            chart.yAxis\n            .axisLabel(getMsg('frequency_of_answer'))\n            .tickFormat(d3.format('.0f'))\n            .ticks(maxCount(labeledCounts));\n\n            chart.tooltip.valueFormatter((v) => getMsg('selected_n_times', v));\n\n            d3.select(this.refs.canvas.getDOMNode())\n            .datum([{\n                values: labeledCounts.toArray()\n            }])\n            .call(chart);\n\n            nv.utils.windowResize(chart.update);\n\n            return chart;\n        },\n        labeledAnswerCounts(answers, values) {\n            return answers.map((answer) => {\n                return Immutable.Map({\n                    label: answer.get('text') || answer.get(\"id\"),\n                    count: values\n                    .filter((value) => value === answer.get('id'))\n                    .count(),\n                });\n            });\n        }\n    });\n\n    const SingleChoiceStats = React.createClass({\n        displayName: 'SingleChoiceStats',\n        render() {\n            const { item, response, getMsg } = this.props;\n            return (\n                <AnswerCountBarChart\n                    values={response}\n                    answers={item.get('answers')}\n                    getMsg={getMsg}\n                />\n            );\n        },\n    });\n\n    /*const LikertScaleStats = React.createClass({\n        displayName: 'LikertScaleStats',\n        render() {\n            const { item, response, getMsg } = this.props;\n            return (\n                <AnswerCountBarChart\n                    values={response}\n                    answers={item.get('answers')}\n                    getMsg={getMsg}\n                />\n            );\n        },\n    });*/\n\n    const LikertScaleStats = React.createClass({\n        displayName: 'LikertScaleStats',\n        render() {\n            const { response, getMsg } = this.props;\n            const smileyAnswers = Poll.getLikertScale().map((smiley) => {\n                return Immutable.Map({\n                    text: smiley,\n                    id: smiley,\n                });\n            });\n\n            return (\n                <AnswerCountBarChart\n                    values={response}\n                    answers={smileyAnswers}\n                    getMsg={getMsg}\n                />\n            );\n        },\n    });\n\n    const MultipleChoiceStats = React.createClass({\n        displayName: 'MultipleChoiceStats',\n        render() {\n            const { item, response, getMsg } = this.props;\n            return (\n                <AnswerCountBarChart\n                    values={response}\n                    answers={item.get('answers')}\n                    getMsg={getMsg}\n                />\n            );\n        },\n    });\n\n    const SmileyStats = React.createClass({\n        displayName: 'SmileyStats',\n        render() {\n            const { response, getMsg } = this.props;\n            const smileyAnswers = Poll.getSmileyValues().map((smiley) => {\n                return Immutable.Map({\n                    text: getMsg(`smiley_${smiley}`),\n                    id: smiley,\n                });\n            });\n\n            return (\n                <AnswerCountBarChart\n                    values={response}\n                    answers={smileyAnswers}\n                    getMsg={getMsg}\n                />\n            );\n        },\n    });\n\n    const OpenStats = React.createClass({\n        displayName: 'OpenStats',\n        render() {\n            let answers = this.props.response.map(this.renderAnswer);\n            if (answers.count() === 0) {\n                answers = <em>No answers given yet</em>;\n            }\n            return (\n                <ul className='list-unstyled'>\n                    {answers}\n                </ul>\n            );\n        },\n        renderAnswer(answer) {\n            return (\n                <li key={answer}>\n                    <blockquote>\"{answer}\"</blockquote>\n                </li>\n            );\n        },\n    });\n\n    const statComponentsForType = Immutable.Map({\n        'single-choice': SingleChoiceStats,\n        'multiple-choice': MultipleChoiceStats,\n        'open': OpenStats,\n        'smiley': SmileyStats,\n        'likert-scale': LikertScaleStats,\n    });\n\n    const Item = React.createClass({\n        displayName: 'Item',\n        render() {\n            return (\n                <div className={this.props.item.get('type')}>\n                    {this.renderQuestion()}\n                    {this.renderAnswer()}\n                </div>\n            );\n        },\n        renderQuestion() {\n            const { item, getMsg } = this.props;\n            const questionLabelKey = Poll.getItemTypeLabelKey(item.get('type'));\n            return (\n                <h3>\n                    {this.props.item.get('question') + ' '}\n                    ({getMsg(questionLabelKey)})\n                </h3>\n            );\n        },\n        renderAnswer() {\n            const { item, response, getMsg } = this.props;\n            const Component = statComponentsForType.get(item.get('type'));\n            return (\n                <Component\n                    item={item}\n                    response={response}\n                    getMsg={getMsg}\n                />\n            );\n        },\n    });\n\n    const ResultsViewComponent = React.createClass({\n        displayName: 'ResultsViewComponent',\n        render() {\n            const poll = this.props.state.get('poll');\n            return (\n                <div id='results'>\n                    <div><h2>Results for \"{poll.get('heading')}\"</h2></div>\n                    {poll.get('items').map(this.renderItem)}\n                </div>\n            );\n        },\n        renderItem(item) {\n            const itemResponse = this.props.state\n            .get('response')\n            .get(item.get('id'), Immutable.List());\n            return (\n                <Item\n                    key={item.get('id')}\n                    item={item}\n                    response={itemResponse}\n                    getMsg={this.props.getMsg}\n                />\n            );\n        },\n    });\n\n    ReflectionPoll.ResultsView = function(container) {\n        return {\n            render: (poll, response, getMsg) => {\n                const state = Immutable.Map({\n                    poll,\n                    response,\n                });\n                console.log('rendering poll results with state %O', state.toJS());\n                React.render(\n                    <ResultsViewComponent state={state} getMsg={getMsg} />,\n                    container\n                );\n            },\n            show: function() {\n                container.style.display = 'block';\n            },\n            hide: function() {\n                container.style.display = 'none';\n            },\n        };\n    };\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}