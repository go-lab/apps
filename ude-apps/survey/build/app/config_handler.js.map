{"version":3,"sources":["config_handler.js"],"names":[],"mappings":";;AAAA,CAAC,UAAS,cAAc,EAAE;AACtB,QAAI,cAAc,GAAG,qDAAqD,GACrD,iCAAiC,CAAC;;AAEvD,kBAAc,CAAC,aAAa,GAAG,aAAa,CAAC;;AAE7C,aAAS,aAAa,CAAC,QAAQ,EAAE,gBAAgB,EAAE,aAAa,EAAE;AAC9D,YAAI,aAAa,GAAG,IAAI,CAAC;AACzB,YAAI,cAAc,CAAC;;AAEnB,eAAO;AACH,sBAAU,EAAE,UAAU;AACtB,oBAAQ,EAAE,cAAc;AACxB,uBAAW,EAAE,kBAAkB;AAC/B,gCAAoB,EAAE,WAAW;SACpC,CAAC;;AAEF,iBAAS,kBAAkB,CAAC,SAAS,EAAE,QAAQ,EAAE;AAC7C,8BAAkB,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,CAAC;SAC/D;;AAED,iBAAS,UAAU,CAAC,QAAQ,EAAE;AAC1B,iBAAK,CAAC,MAAM,CAAC,yBAAyB,CAClC,eAAe,EACf,QAAQ,EACR,IAAI,EACJ;AACI,kCAAkB,EAAG,IAAI;AACzB,qBAAK,EAAE,KAAK;aACf,EACD,8BAA8B,CACjC,CAAC;;AAEF,qBAAS,8BAA8B,CAAC,gBAAgB,EAAE,eAAe,EAAE;AACvE,8BAAc,GAAG,eAAe,CAAC;;AAEjC,8BAAc,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1D,8BAAc,CAAC,kBAAkB,CAAC,IAAI,EAAE,UAAS,KAAK,EAAE,QAAQ,EAAE;AAC9D,wBAAI,KAAK,EAAE;AACP,+BAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;qBAC1B;AACD,wBAAI;AACA,4BAAI,SAAS,GAAG,4BAA4B,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAClE,4BAAI,QAAQ,KAAK,IAAI,EAAE;AACnB,0CAAc,CAAC,cAAc,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;yBAC3D,MAAM;AACH,qCAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;yBAC7B;qBACJ,CAAC,OAAM,GAAG,EAAE;AACT,gCAAQ,CAAC,GAAG,CAAC,CAAC;qBACjB;iBACJ,CAAC,CAAC;aAEN;SACJ;;AAED,iBAAS,cAAc,CAAC,GAAG,EAAE;AACzB,qCAAyB,EAAE,CAAC;AAC5B,gBAAI,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC;AACrD,gBAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC3B,sBAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,GAAG,GAAG,uBAAuB,CAAC,CAAC;aACtE;AACD,gBAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;AAC5B,uBAAO,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;aAC9B;AACD,mBAAO,KAAK,CAAC,KAAK,CAAC;SACtB;;AAED,iBAAS,kBAAkB,CAAC,SAAS,EAAE,QAAQ,EAAE;AAC7C,qCAAyB,CAAC,QAAQ,CAAC,CAAC;AACpC,qBAAS,CAAC,EAAE,GAAG,aAAa,CAAC,EAAE,CAAC;AAChC,0BAAc,CAAC,cAAc,CACzB,aAAa,CAAC,EAAE,EAChB,SAAS,EACT,4BAA4B,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CACpD,CAAC;SACL;;AAED,iBAAS,WAAW,CAAC,QAAQ,EAAE;AAC3B,qCAAyB,CAAC,QAAQ,CAAC,CAAC;AACpC,8BAAkB,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;SAC/C;;AAED,iBAAS,yBAAyB,CAAC,QAAQ,EAAE;AACzC,gBAAI,aAAa,KAAK,IAAI,EAAE;AACxB,oBAAI,KAAK,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;AACtC,oBAAI,QAAQ,EAAE;AACV,4BAAQ,CAAC,KAAK,CAAC,CAAC;iBACnB,MAAM;AACH,0BAAM,KAAK,CAAC;iBACf;aACJ;SACJ;;AAED,iBAAS,4BAA4B,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE;AAC7D,gBAAI,KAAK,EAAE;AACP,uBAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC1B;AACD,yBAAa,GAAG,QAAQ,CAAC,OAAO,CAAC;AACjC,yBAAa,CAAC,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;AACxC,oBAAQ,CAAC,IAAI,CAAC,CAAC;SAClB;;;AAGD,iBAAS,kBAAkB,CAAC,GAAG,EAAE;AAC7B,mBAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAS,MAAM,EAAE,GAAG,EAAE;AACjD,sBAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;AAClC,uBAAO,MAAM,CAAC;aACjB,EAAE,EAAE,CAAC,CAAC;SACV;KACJ;CACJ,CAAA,CAAE,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC","file":"config_handler.js","sourcesContent":["(function(ReflectionPoll) {\n    var LOAD_ERROR_MSG = 'ConfigHandler: dynamic config not yet loaded, call ' +\n                         'configManager.loadConfig first.';\n\n    ReflectionPoll.ConfigHandler = ConfigHandler;\n\n    function ConfigHandler(toolName, configDefinition, defaultConfig) {\n        var dynamicConfig = null;\n        var storageHandler;\n\n        return {\n            loadConfig: loadConfig,\n            getEntry: getConfigEntry,\n            writeConfig: writeConfigFromMap,\n            resetToDefaultConfig: resetConfig,\n        };\n\n        function writeConfigFromMap(configMap, callback) {\n            writeDynamicConfig(convertMapToConfig(configMap), callback);\n        }\n\n        function loadConfig(callback) {\n            golab.common.createEnvironmentHandlers(\n                'configuration',\n                toolName,\n                'en',\n                {\n                    notificationServer : null,\n                    cache: false\n                },\n                setStorageHandlerAndLoadConfig\n            );\n\n            function setStorageHandlerAndLoadConfig(_metadataHandler, _storageHandler) {\n                storageHandler = _storageHandler;\n                // filter by resource type\n                storageHandler.configureFilters(true, false, false, true);\n                storageHandler.readLatestResource(null, function(error, resource) {\n                    if (error) {\n                        return callback(error);\n                    }\n                    try {\n                        var setConfig = setDynamicConfigFromResource.bind(null, callback);\n                        if (resource === null) {\n                            storageHandler.createResource(defaultConfig, setConfig);\n                        } else {\n                            setConfig(null, resource);\n                        }\n                    } catch(err) {\n                        callback(err);\n                    }\n                });\n\n            }\n        }\n\n        function getConfigEntry(key) {\n            assertDynamicConfigLoaded();\n            var entry = dynamicConfig[key] || defaultConfig[key];\n            if (typeof entry !== 'object') {\n                throw new Error('Entry with key ' + key + ' not found in config.');\n            }\n            if (Array.isArray(entry.value)) {\n                return entry.value.slice();\n            }\n            return entry.value;\n        }\n\n        function writeDynamicConfig(newConfig, callback) {\n            assertDynamicConfigLoaded(callback);\n            newConfig.id = dynamicConfig.id;\n            storageHandler.updateResource(\n                dynamicConfig.id,\n                newConfig,\n                setDynamicConfigFromResource.bind(null, callback)\n            );\n        }\n\n        function resetConfig(callback) {\n            assertDynamicConfigLoaded(callback);\n            writeDynamicConfig(defaultConfig, callback);\n        }\n\n        function assertDynamicConfigLoaded(callback) {\n            if (dynamicConfig === null) {\n                var error = new Error(LOAD_ERROR_MSG);\n                if (callback) {\n                    callback(error);\n                } else {\n                    throw error;\n                }\n            }\n        }\n\n        function setDynamicConfigFromResource(callback, error, resource) {\n            if (error) {\n                return callback(error);\n            }\n            dynamicConfig = resource.content;\n            dynamicConfig.id = resource.metadata.id;\n            callback(null);\n        }\n\n        // from `{ key: 'val' }` to `{ key: { value: 'val' }}`\n        function convertMapToConfig(map) {\n            return Object.keys(map).reduce(function(config, key) {\n                config[key] = { value: map[key] };\n                return config;\n            }, {});\n        }\n    }\n})(golab.tools.ReflectionPoll);\n"],"sourceRoot":"/source/"}