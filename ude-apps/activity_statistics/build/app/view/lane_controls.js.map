{"version":3,"sources":["view/lane_controls.js"],"names":[],"mappings":";;AAAA,CAAC,UAAC,kBAAkB,EAAK;iBACc,KAAK;QAAhC,SAAS,UAAT,SAAS;QAAE,WAAW,UAAX,WAAW;;AAE9B,QAAM,YAAY,GAAG,WAAW,CAAC;AAC7B,mBAAW,EAAE,cAAc;AAC3B,iBAAS,EAAE;AACP,uBAAW,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;AACtC,oBAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;AACrC,kBAAM,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;AACjC,kBAAM,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;SACpC;AACD,6BAAqB,EAAA,+BAAC,SAAS,EAAE;AAC7B,mBAAO,EACH,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAC5C,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA,AACjD,CAAC;SACN;AACD,cAAM,EAAA,kBAAG;gBACG,WAAW,GAAK,IAAI,CAAC,KAAK,CAA1B,WAAW;;AACnB,gBAAM,QAAQ,GAAG,UAAU,CAAC;AACxB,qBAAK,EAAE,IAAI;AACX,0BAAU,EAAE,IAAI;AAChB,wBAAQ,EAAE,IAAI;aACjB,CAAC,CAAC;AACH,gBAAM,IAAI,uBAAoB,WAAW,GAAG,MAAM,GAAG,OAAO,CAAA,AAAE,CAAC;;AAE/D,mBACI;;kBAAK,SAAS,EAAC,UAAU;gBACrB;;;AACI,iCAAS,EAAE,QAAQ,AAAC;AACpB,+BAAO,EAAE,IAAI,CAAC,aAAa,AAAC;oBAC5B,2BAAG,SAAS,iBAAe,IAAI,AAAG,GAAK;oBACvC;;0BAAM,SAAS,EAAC,SAAS;wBAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,wBAAwB,CAAC;qBAAQ;iBACzE;aACP,CACR;SACL;AACD,qBAAa,EAAA,yBAAG;AACZ,gBAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;AACxB,oBAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aAC3D,MAAM;AACH,oBAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aAC3D;SACJ;KACJ,CAAC,CAAC;;AAEH,sBAAkB,CAAC,YAAY,GAAG,YAAY,CAAC;CAClD,CAAA,CAAE,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC","file":"view/lane_controls.js","sourcesContent":["((activityStatistics) => {\n    const { PropTypes, createClass } = React;\n\n    const LaneControls = createClass({\n        displayName: 'LaneControls',\n        propTypes: {\n            isMinimized: PropTypes.bool.isRequired,\n            username: PropTypes.string.isRequired,\n            action: PropTypes.func.isRequired,\n            getMsg: PropTypes.func.isRequired,\n        },\n        shouldComponentUpdate(nextProps) {\n            return !(\n                R.eqProps('username', nextProps, this.props) &&\n                R.eqProps('isMinimized', nextProps, this.props)\n             );\n        },\n        render() {\n            const { isMinimized } = this.props;\n            const btnClass = classNames({\n                'btn': true,\n                'btn-flat': true,\n                'btn-xs': true,\n            });\n            const icon = `glyphicon-eye-${isMinimized ? 'open' : 'close'}`;\n\n            return (\n                <div className='controls'>\n                    <button\n                        className={btnClass}\n                        onClick={this.onToggleClick}>\n                        <i className={`glyphicon ${icon}`}></i>\n                        <span className='sr-only'>{this.props.getMsg('minimize_this_timeline')}</span>\n                    </button>\n                </div>\n            );\n        },\n        onToggleClick() {\n            if (this.props.isMinimized) {\n                this.props.action('maximize_lane', this.props.username);\n            } else {\n                this.props.action('minimize_lane', this.props.username);\n            }\n        }\n    });\n\n    activityStatistics.LaneControls = LaneControls;\n})(golab.tools.activityStatistics);\n"],"sourceRoot":"/source/"}