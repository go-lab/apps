{"version":3,"sources":["view/button.js"],"names":[],"mappings":";;AAAA,CAAC,UAAC,kBAAkB,EAAK;iBACc,KAAK;QAAhC,WAAW,UAAX,WAAW;QAAE,SAAS,UAAT,SAAS;;AAE9B,sBAAkB,CAAC,MAAM,GAAG,WAAW,CAAC;AACpC,mBAAW,EAAE,QAAQ;AACrB,uBAAe,EAAA,2BAAG;AACd,mBAAO;AACH,kBAAE,EAAE,EAAE;AACN,yBAAS,EAAE,EAAE;AACb,qBAAK,EAAE,EAAE;AACT,yBAAS,EAAE,IAAI;AACf,sBAAM,EAAE,KAAK;AACb,uBAAO,EAAE,mBAAM,EAAE;AACjB,qCAAqB,EAAE,KAAK;aAC/B,CAAC;SACL;AACD,cAAM,EAAA,kBAAG;yBAC8B,IAAI,CAAC,KAAK;gBAArC,MAAM,UAAN,MAAM;gBAAE,OAAO,UAAP,OAAO;gBAAE,KAAK,UAAL,KAAK;;AAC9B,gBAAM,QAAQ,GAAG,UAAU,CAAC;AACxB,qBAAK,EAAE,IAAI;AACX,0BAAU,EAAE,IAAI;AAChB,sBAAM,EAAN,MAAM;aACT,CAAC,CAAA;AACF,mBACI;;kBAAQ,SAAS,EAAE,QAAQ,AAAC,EAAC,OAAO,EAAE,OAAO,AAAC;gBACzC,IAAI,CAAC,UAAU,EAAE;;gBAAG,IAAI,CAAC,WAAW,EAAE;aAClC,CACX;SACL;AACD,kBAAU,EAAA,sBAAG;gBACD,SAAS,GAAK,IAAI,CAAC,KAAK,CAAxB,SAAS;;AACjB,gBAAI,CAAE,SAAS,EAAE;AACb,uBAAO,IAAI,CAAC;aACf;AACD,mBACI,2BAAG,SAAS,2BAAyB,SAAS,AAAG,GAAK,CACxD;SACL;AACD,mBAAW,EAAA,uBAAG;AACV,gBAAM,SAAS,GAAG,UAAU,CAAC;AACzB,yBAAS,EAAE,IAAI,CAAC,KAAK,CAAC,qBAAqB;aAC9C,CAAC,CAAC;AACH,mBAAO;;kBAAM,SAAS,EAAE,SAAS,AAAC;gBAAE,IAAI,CAAC,KAAK,CAAC,KAAK;aAAQ,CAAA;SAC/D;KACJ,CAAC,CAAC;CACN,CAAA,CAAE,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC","file":"view/button.js","sourcesContent":["((activityStatistics) => {\n    const { createClass, propTypes } = React;\n\n    activityStatistics.Button = createClass({\n        displayName: 'Button',\n        getDefaultProps() {\n            return {\n                id: '',\n                className: '',\n                label: '',\n                glyphicon: null,\n                active: false,\n                onClick: () => {},\n                screenReaderOnlyLabel: false,\n            };\n        },\n        render() {\n            const { active, onClick, label } = this.props;\n            const btnClass = classNames({\n                'btn': true,\n                'btn-flat': true,\n                active,\n            })\n            return (\n                <button className={btnClass} onClick={onClick}>\n                    {this.renderIcon()} {this.renderLabel()}\n                </button>\n            );\n        },\n        renderIcon() {\n            const {Â glyphicon } = this.props;\n            if (! glyphicon) {\n                return null;\n            }\n            return (\n                <i className={`glyphicon glyphicon-${glyphicon}`}></i>\n            );\n        },\n        renderLabel() {\n            const className = classNames({\n                'sr-only': this.props.screenReaderOnlyLabel,\n            });\n            return <span className={className}>{this.props.label}</span>\n        },\n    });\n})(golab.tools.activityStatistics);\n\n"],"sourceRoot":"/source/"}