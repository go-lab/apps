{"version":3,"sources":["view/timeslider.js"],"names":[],"mappings":"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","file":"view/timeslider.js","sourcesContent":["((activityStatistics) => {\n    const { PropTypes, createClass } = React;\n    const { scaleEquals } = activityStatistics.util;\n    const mapTime = R.map((d) => d.getTime());\n    const ONE_MINUTE = 60 * 1000;\n\n    const Timeslider = createClass({\n        displayName: 'Timeslider',\n        propTypes: {\n            selectedScale: PropTypes.func.isRequired,\n            fullScale: PropTypes.func.isRequired,\n            action: PropTypes.func.isRequired,\n            width: PropTypes.number,\n        },\n        shouldComponentUpdate(nextProps) {\n            return !(\n                scaleEquals(nextProps.selectedScale, this.props.selectedScale) &&\n                scaleEquals(nextProps.fullScale, this.props.fullScale) &&\n                nextProps.width === this.props.width\n            );\n        },\n        render() {\n            return (\n                <div id='timeslider'>\n                    <input\n                        type='text'\n                        ref='slider'\n                        style={{ width: this.props.width || 100 }}\n                    />\n                </div>\n            );\n        },\n        componentDidMount() {\n            const input = this.refs.slider;\n\n            this.slider = new Slider(input, {\n                range: true,\n                step: ONE_MINUTE,\n                tooltip: 'hide',\n            });\n\n            this.update();\n        },\n        componentDidUpdate() {\n            this.update();\n        },\n        update() {\n            const [start, end] = mapTime(this.props.fullScale.domain());\n            const [selectedStart, selectedEnd] = mapTime(this.props.selectedScale.domain());\n\n            this.slider.setAttribute('min', start);\n            this.slider.setAttribute('max', end);\n            this.slider.setValue([selectedStart, selectedEnd]);\n            this.slider.refresh();\n            this.slider.on('change', this.onSliderChange);\n        },\n        onSliderChange({ oldValue, newValue }) {\n            const noChange = oldValue[0] === newValue[0] &&\n                             oldValue[1] === newValue[1];\n            if (noChange) return;\n\n            let min = newValue[0];\n            let max = newValue[1];\n            const [start, end] = mapTime(this.props.fullScale.domain());\n            if (min <= start) {\n                min = null;\n            }\n            if (max >= end) {\n                max = null;\n            }\n            this.props.action('set_time_selection', { min, max });\n        },\n    });\n\n    activityStatistics.Timeslider = Timeslider;\n})(golab.tools.activityStatistics);\n"],"sourceRoot":"/source/"}