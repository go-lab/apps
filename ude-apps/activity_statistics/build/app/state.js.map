{"version":3,"sources":["state.js"],"names":[],"mappings":";;AAAA,CAAC,UAAC,kBAAkB,EAAK;QACb,IAAI,GAAK,kBAAkB,CAA3B,IAAI;;AACZ,QAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;qBACP,SAAS;QAA1C,IAAI,cAAT,GAAG;QAAc,KAAK,cAAX,IAAI;QAAc,IAAI,cAAT,GAAG;;AACnC,QAAM,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAC/B,QAAM,WAAW,GAAG,SAAd,WAAW,CAAI,QAAQ,EAAK;AAC9B,eAAO,IAAI,CAAC;AACR,2BAAe,EAAE,KAAK,EAAE;AACxB,8BAAkB,EAAE,EAAE;AACtB,yBAAa,EAAE,KAAK,EAAE;AACtB,4BAAgB,EAAE,EAAE;AACpB,oBAAQ,EAAE,QAAQ,iBAAe,OAAO,EAAE,AAAE;AAC5C,qBAAS,EAAE,KAAK;SACnB,CAAC,CAAC;KACN,CAAC;;AAEF,QAAM,KAAK,GAAG;AACV,iBAAS,EAAE,CAAC;AACZ,iBAAS,EAAE,CAAC;AACZ,mBAAW,EAAE,CAAC;AACd,YAAI,EAAA,cAAC,WAAW,EAAE;AACd,gBAAM,KAAK,GAAG,IAAI,CAAC;AACf,kCAAkB,EAAE,KAAK;AACzB,gCAAgB,EAAE,KAAK,CAAC,SAAS;AACjC,+BAAe,EAAE,IAAI;AACrB,gCAAgB,EAAE,EAAE;AACpB,8BAAc,EAAE,EAAE;AAClB,sBAAM,EAAE,IAAI,EAAE;AACd,oBAAI,EAAE,IAAI,EAAE;AACZ,iCAAiB,EAAE,KAAK;AACxB,2BAAW,EAAE,IAAI;AACjB,iCAAiB,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AACjD,6BAAa,EAAE,IAAI,EAAE;AACrB,2BAAW,EAAE,IAAI;AACjB,qBAAK,EAAE,GAAG;AACV,2BAAW,EAAX,WAAW;AACX,qBAAK,EAAE,KAAK,EAAE;AACd,8BAAc,EAAE,KAAK,EAAE;aAC1B,CAAC,CAAC;AACH,mBAAO,KAAK,CAAC,gBAAgB,CAAC,KAAK,EAAE;AACjC,yBAAS,EAAE,GAAG;AACd,4BAAY,EAAE,EAAE;aACnB,CAAC,CAAC;SACN;AACD,8BAAsB,EAAA,gCAAC,WAAW,EAAgB;gBAAd,KAAK,yDAAC,IAAI,EAAE;;AAC5C,gBAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACxD,iBAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;AACjC,mBAAO,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;SAC5E;AACD,mBAAW,EAAA,qBAAC,KAAK,EAAE,OAAO,EAAE;AACxB,iBAAK,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AACvC,mBAAO,iBAAiB,CAAC,KAAK,CAAC,CAAC;SACnC;AACD,kBAAU,EAAA,oBAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE;AACjC,mBAAO,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,UAAC,KAAK,EAAK;AACvC,oBAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,UAAA,CAAC;2BAAI,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,QAAQ;iBAAA,CAAC,CAAC;AACrE,oBAAI,SAAS,KAAK,CAAC,CAAC,EAAE;AAClB,6BAAS,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;AAC1B,yBAAK,GAAG,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACvD;AACD,uBAAO,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;aAC3C,CAAC,CAAC;SACN;AACD,2BAAmB,EAAA,6BAAC,KAAK,EAAE,IAAI,EAAE;AAC7B,gBAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACvC,iBAAK,GAAG,KAAK,CACZ,MAAM,CAAC,eAAe,EAAE,UAAC,IAAI;uBAAK,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;aAAA,CAAC,CAAC;AAC7D,gBAAI,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE;AACnC,qBAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;aAC1D;AACD,mBAAO,KAAK,CAAC;SAChB;AACD,yBAAiB,EAAA,2BAAC,KAAK,EAAE,IAAI,EAAE;AAC3B,gBAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,EAAE;AAC3C,uBAAO;aACV;AACD,gBAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACvC,iBAAK,GAAG,KAAK,CACZ,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CACxB,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAC1D,mBAAO,iBAAiB,CAAC,KAAK,CAAC,CAAC;SACnC;AACD,6BAAqB,EAAA,+BAAC,KAAK,EAAE,QAAQ,EAAsB;gBAApB,OAAO,yDAAC,CAAC,CAAC,QAAQ;;AACrD,mBAAO,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAC,IAAI,EAAK;AAC/C,oBAAM,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAChE,uBAAO,IAAI,CACV,GAAG,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAC1C,GAAG,CAAC,iBAAiB,EAAE,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;aAC9D,CAAC,CAAC;SACN;AACD,2BAAmB,EAAA,6BAAC,KAAK,EAAE,QAAQ,EAAsB;gBAApB,OAAO,yDAAC,CAAC,CAAC,QAAQ;;AACnD,mBAAO,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAC,IAAI,EAAK;AAC/C,oBAAM,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC5D,uBAAO,IAAI,CACV,GAAG,CAAC,kBAAkB,EAAE,aAAa,CAAC,CACtC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;aAC1D,CAAC,CAAC;SACN;AACD,wBAAgB,EAAA,0BAAC,KAAK,EAAoC;6EAAJ,EAAE;;gBAA9B,SAAS,QAAT,SAAS;gBAAE,YAAY,QAAZ,YAAY;;AAC7C,mBAAO,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE,UAAC,UAAU,EAAK;AAC9C,oBAAI,UAAU,KAAK,SAAS,EAAE;AAC1B,8BAAU,GAAG,IAAI,EAAE,CAAC;iBACvB;AACD,oBAAI,SAAS,KAAK,SAAS,EAAE;AACzB,8BAAU,GAAG,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;iBACvD;AACD,oBAAI,YAAY,KAAK,SAAS,EAAE;AAC5B,8BAAU,GAAG,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;iBAC7D;AACD,uBAAO,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,UAAU,CAAC,CAAC;aAC9D,CAAC,CAAC;SACN;KACJ,CAAC;;AAEF,aAAS,aAAa,CAAC,WAAW,EAA6B;YAA3B,kBAAkB,yDAAC,IAAI,EAAE;;AACzD,YAAM,UAAU,GAAG,CAAC,CAAC;AACrB,YAAI,SAAS,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;AAC/C,YAAI,WAAW,GAAG,kBAAkB,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;AACtE,YAAI,SAAS,GAAG,GAAG,CAAC;AACpB,YAAI,SAAS,GAAG,GAAG,EAAE;AACjB,qBAAS,GAAG,GAAG,CAAC;SACnB;AACD,YAAI,SAAS,GAAG,GAAG,EAAE;AACjB,qBAAS,GAAG,GAAG,CAAC;SACnB;AACD,YAAM,aAAa,GAAG,SAAS,GAAG,SAAS,GAAG,UAAU,CAAC;AACzD,eAAO,kBAAkB,CACxB,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAC3B,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAC3B,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,CACnC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;KACpC;;AAED,aAAS,iBAAiB,CAAC,OAAO,EAAE;AAChC,eAAO,OAAO,CAAC,WAAW,GAAG,eAAe,GAAG,CAAC,CAAC;KACpD;;AAED,aAAS,kBAAkB,CAAC,WAAW,EAAE,UAAU,EAAE;AACjD,YAAM,aAAa,GAAG,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AAC5D,YAAM,gBAAgB,GAAG,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;AACjE,YAAM,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;AACxC,YAAM,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC;AAC1C,eAAO,cAAc,GAAG,aAAa,GAAG,gBAAgB,GAAG,SAAS,CAAC;KACxE;;AAED,aAAS,SAAS,CAAC,IAAI,EAAE;AACrB,eAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CACpB,IAAI,CAAC,cAAc,EAAE,EACrB,IAAI,CAAC,WAAW,EAAE,EAClB,IAAI,CAAC,UAAU,EAAE,CACpB,CAAC,CAAC;KACN;;;;AAID,aAAS,iBAAiB,CAAC,KAAK,EAAE;AAC9B,eAAO,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,IAAI,EAAK;AAC9C,mBAAO,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,QAAQ,EAAK;AAC3D,uBAAO,KAAK,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;aAClE,EAAE,KAAK,CAAC,CAAC;SACb,EAAE,KAAK,CAAC,CAAC;KACb;;AAED,aAAS,iBAAiB,CAAC,KAAK,EAAE;AAC9B,YAAM,KAAK,GAAG,CAAC,CAAC,OAAO,CACnB,iBAAiB,EACjB,sBAAsB,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CACnD,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;;AAEtB,eAAO,KAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;KAC7C;;AAED,aAAS,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE;AAC7B,YAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,EAAE;AAClC,mBAAO,KAAK,CAAC;SAChB;AACD,eAAO,KAAK,CAAC,cAAc,EAAE,KAAK,KAAK,CAAC,cAAc,EAAE,IACpD,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE,IAC3C,KAAK,CAAC,UAAU,EAAE,KAAK,KAAK,CAAC,UAAU,EAAE,CAAC;KACjD;;AAED,aAAS,sBAAsB,CAAC,GAAG,EAAE;AACjC,eAAO,UAAC,KAAK;mBAAK,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAK;AAClC,uBAAO,IAAI,CACV,MAAM,CAAC,iBAAiB,EAAE,UAAC,EAAE;2BAAK,EAAE,CAAC,MAAM,CAAC,UAAC,CAAC;+BAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC;qBAAA,CAAC;iBAAA,CAAC,CACnF,MAAM,CAAC,oBAAoB,EAAE,UAAC,EAAE;2BAAK,EAAE,CAAC,MAAM,CAAC,UAAC,CAAC;+BAAK,SAAS,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC;qBAAA,CAAC;iBAAA,CAAC,CAC/E,MAAM,CAAC,eAAe,EAAE,UAAC,EAAE;2BAAK,EAAE,CAAC,MAAM,CAAC,UAAC,CAAC;+BAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC;qBAAA,CAAC;iBAAA,CAAC,CACrF,MAAM,CAAC,kBAAkB,EAAE,UAAC,EAAE;2BAAK,EAAE,CAAC,MAAM,CAAC,UAAC,CAAC;+BAAK,SAAS,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC;qBAAA,CAAC;iBAAA,CAAC,CAAC;aACtF,CAAC;SAAA,CAAC;KACN;;AAED,aAAS,iBAAiB,CAAC,KAAK,EAAE;AAC9B,eAAO,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,EAAK;AAC1B,mBAAO,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SACpD,CAAC,CAAC;KACN;;AAGD,sBAAkB,CAAC,KAAK,GAAG,KAAK,CAAC;CACpC,CAAA,CAAE,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC","file":"state.js","sourcesContent":["((activityStatistics) => {\n    const { util } = activityStatistics;\n    const SCROLLBAR_WIDTH = util.measureScrollBarWidth();\n    const { Map: IMap, List: IList, Set: ISet } = Immutable;\n    const counter = util.counter();\n    const defaultLane = (username) => {\n        return IMap({\n            phaseActivities: IList(),\n            rawPhaseActivities: [],\n            appActivities: IList(),\n            rawAppActivities: [],\n            username: username || `Unnamed ${counter()}`,\n            minimized: false,\n        });\n    };\n\n    const State = {\n        CONN_INIT: 0,\n        CONN_OPEN: 1,\n        CONN_CLOSED: 2,\n        init(rootElement) {\n            const state = IMap({\n                statusBarMinimized: false,\n                connectionStatus: State.CONN_INIT,\n                activityInFocus: null,\n                highlightedPhase: '',\n                highlightedApp: '',\n                phases: ISet(),\n                apps: ISet(),\n                showAppActivities: false,\n                timeMarkerX: null,\n                selectedTimeRange: IMap({ min: null, max: null }),\n                availableDays: ISet(),\n                selectedDay: null,\n                width: 700,\n                rootElement,\n                lanes: IList(),\n                projectedLanes: IList(),\n            });\n            return State.updateDimensions(state, {\n                topHeight: 200,\n                bottomHeight: 75,\n            });\n        },\n        initWithPreloadedLanes(rootElement, lanes=IMap()) {\n            let state = State.init(rootElement).set('lanes', lanes);\n            state = loadAvailableDays(state);\n            return State.updateSelectedDay(state, state.get('availableDays').last());\n        },\n        updateLanes(state, updater) {\n            state = state.update('lanes', updater);\n            return setProjectedLanes(state);\n        },\n        updateLane(state, username, updater) {\n            return State.updateLanes(state, (lanes) => {\n                let laneIndex = lanes.findIndex(l => l.get('username') === username);\n                if (laneIndex === -1) {\n                    laneIndex = lanes.count();\n                    lanes = lanes.set(laneIndex, defaultLane(username));\n                }\n                return lanes.update(laneIndex, updater);\n            });\n        },\n        updateAvailableDays(state, date) {\n            const normalizedDate = stripTime(date);\n            state = state\n            .update('availableDays', (days) => days.add(normalizedDate));\n            if (state.get('selectedDay') === null) {\n                state = State.updateSelectedDay(state, normalizedDate);\n            }\n            return state;\n        },\n        updateSelectedDay(state, date) {\n            if (isSameDay(state.get('selectedDay'), date)) {\n                return;\n            }\n            const normalizedDate = stripTime(date);\n            state = state\n            .set('selectedDay', date)\n            .set('selectedTimeRange', IMap({ min: null, max: null }));\n            return setProjectedLanes(state);\n        },\n        updatePhaseActivities(state, username, updater=R.identity) {\n            return State.updateLane(state, username, (lane) => {\n                const phaseActivities = updater(lane.get('rawPhaseActivities'));\n                return lane\n                .set('rawPhaseActivities', phaseActivities)\n                .set('phaseActivities', Immutable.fromJS(phaseActivities));\n            });\n        },\n        updateAppActivities(state, username, updater=R.identity) {\n            return State.updateLane(state, username, (lane) => {\n                const appActivities = updater(lane.get('rawAppActivities'));\n                return lane\n                .set('rawAppActivities', appActivities)\n                .set('appActivities', Immutable.fromJS(appActivities));\n            });\n        },\n        updateDimensions(state, { topHeight, bottomHeight } = {}) {\n            return state.update('dimensions', (dimensions) => {\n                if (dimensions === undefined) {\n                    dimensions = IMap();\n                }\n                if (topHeight !== undefined) {\n                    dimensions = dimensions.set('topHeight', topHeight);\n                }\n                if (bottomHeight !== undefined) {\n                    dimensions = dimensions.set('bottomHeight', bottomHeight);\n                }\n                return getDimensions(state.get('rootElement'), dimensions);\n            });\n        },\n    };\n\n    function getDimensions(rootElement, previousDimensions=IMap()) {\n        const laneBorder = 2;\n        let laneWidth = getAvailableWidth(rootElement);\n        let lanesHeight = getAvailableHeight(rootElement, previousDimensions);\n        let menuWidth = 250;\n        if (laneWidth < 700) {\n            menuWidth = 160;\n        }\n        if (laneWidth < 600) {\n            laneWidth = 600;\n        }\n        const timelineWidth = laneWidth - menuWidth - laneBorder;\n        return previousDimensions\n        .set('laneWidth', laneWidth)\n        .set('menuWidth', menuWidth)\n        .set('timelineWidth', timelineWidth)\n        .set('lanesHeight', lanesHeight);\n    }\n\n    function getAvailableWidth(element) {\n        return element.clientWidth - SCROLLBAR_WIDTH - 3;\n    }\n\n    function getAvailableHeight(rootElement, dimensions) {\n        const topMenuHeight = dimensions.get('topHeight', 200) + 10;\n        const bottomAxisHeight = dimensions.get('bottomHeight', 75) + 10;\n        const offsetTop = rootElement.offsetTop;\n        const viewportHeight = window.innerHeight;\n        return viewportHeight - topMenuHeight - bottomAxisHeight - offsetTop;\n    }\n\n    function stripTime(date) {\n        return new Date(Date.UTC(\n            date.getUTCFullYear(),\n            date.getUTCMonth(),\n            date.getUTCDate()\n        ));\n    }\n\n    // Resets `availableDays` to include all days contained in `lanes`. For\n    // adding values to `availableDays` use `State.updateAvailableDays`\n    function loadAvailableDays(state) {\n        return state.get('lanes').reduce((state, lane) => {\n            return lane.get('phaseActivities').reduce((state, activity) => {\n                return State.updateAvailableDays(state, activity.get('start'));\n            }, state);\n        }, state);\n    }\n\n    function setProjectedLanes(state) {\n        const lanes = R.compose(\n            withPhaseActivity,\n            filterActivitiesForDay(state.get('selectedDay'))\n        )(state.get('lanes'));\n\n        return state.set('projectedLanes', lanes);\n    }\n\n    function isSameDay(date1, date2) {\n        if (date1 === null || date2 === null) {\n            return false;\n        }\n        return date1.getUTCFullYear() === date2.getUTCFullYear() &&\n            date1.getUTCMonth() === date2.getUTCMonth() &&\n            date1.getUTCDate() === date2.getUTCDate();\n    }\n\n    function filterActivitiesForDay(day) {\n        return (lanes) => lanes.map((lane) => {\n            return lane\n            .update('phaseActivities', (as) => as.filter((a) => isSameDay(a.get('start'), day)))\n            .update('rawPhaseActivities', (as) => as.filter((a) => isSameDay(a.start, day)))\n            .update('appActivities', (as) => as.filter((a) => isSameDay(a.get('timestamp'), day)))\n            .update('rawAppActivities', (as) => as.filter((a) => isSameDay(a.timestamp, day)));\n        });\n    }\n\n    function withPhaseActivity(lanes) {\n        return lanes.filter((lane) => {\n            return lane.get('phaseActivities').count() !== 0;\n        });\n    }\n\n\n    activityStatistics.State = State;\n})(golab.tools.activityStatistics);\n"],"sourceRoot":"/source/"}