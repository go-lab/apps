{"version":3,"sources":["activity_provider.js"],"names":[],"mappings":"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","file":"activity_provider.js","sourcesContent":["/**\n * `ActivityProvider` connects to the analytics server using the vertx.EventBus\n * library, transforms the data it receives into something the application can\n * work with and emits events containing this data. The conversion of the raw\n * data from the server into events is handled by `RawPhaseDataHandler` and\n * `RawAppDataHandler` respectively.\n */\n((activityStatistics) => {\n    const {\n        RawPhaseDataHandler,\n        RawAppDataHandler,\n    } = activityStatistics;\n    const eventBusReceivePrefix = 'client.browser.sessionControllerCommand';\n    const eventBusSendPrefix = 'client.sessionController.browserCommand';\n    const activityDataKey = 'PhaseAppHistory';\n    const phaseDataKey = 'StudentPhaseActivityTimeline';\n    const log = (...args) => {\n        args[0] = '[ActivityProvider] ' + args[0];\n        console.log(...args);\n    };\n\n    const publishEvents = (pubSub, events) => {\n        if (!Array.isArray(events)) {\n            events = [events];\n        }\n        events.forEach((event) => {\n            if (!event) return;\n            log('event %s published with data %O', event.name, event.data);\n            pubSub.publish(event.name, event.data);\n        });\n    };\n\n    const ActivityProvider = ({ clientId, ilsId, eventBusAddress }) => {\n        const events = activityStatistics.PubSub();\n        const phaseDataHandler = RawPhaseDataHandler();\n        const appDataHandler = RawAppDataHandler();\n        const eventBus = new vertx.EventBus(eventBusAddress);\n        eventBus.onopen = () => {\n            registerMessageHandlers();\n            registerClient();\n            events.publish('connection_opened');\n        };\n        eventBus.onclose = () => events.publish('connection_closed');\n\n        return {\n            on: (targetedEventName, listener) => {\n                events.subscribe((eventName, ...args) => {\n                    if (eventName === targetedEventName) {\n                        listener.apply(null, args);\n                    }\n                });\n            },\n        };\n\n        function registerMessageHandlers() {\n            const activityRegisterKey = `${eventBusReceivePrefix}.${activityDataKey}${clientId}`;\n            const phaseRegisterKey = `${eventBusReceivePrefix}.${phaseDataKey}${clientId}`;\n            eventBus.registerHandler(activityRegisterKey, (message, replier) => {\n                replier('ok');\n                log('Received message for %s from eventbus: %O', activityDataKey, message);\n                if (message.action === 'ping') return;\n                publishEvents(events, appDataHandler.handle(message));\n            });\n            eventBus.registerHandler(phaseRegisterKey, (message, replier) => {\n                replier('ok');\n                log('Received message for %s from eventbus: %O', phaseDataKey, message);\n                if (message.action === 'ping') return;\n                publishEvents(events, phaseDataHandler.handle(message));\n            });\n        }\n\n        function registerClient() {\n            const message = {\n                action: 'register',\n                key: {\n                    ilsId,\n                    clientId,\n                    start: null,\n                    stop: null,\n                    appSpecificSettings: null\n                }\n            };\n\n            const activitySessionKey = `${eventBusSendPrefix}.${activityDataKey}`;\n            const phaseSessionKey = `${eventBusSendPrefix}.${phaseDataKey}`;\n\n            eventBus.send(activitySessionKey, message, (response) => {\n                log('Registered for activity data.', 'Response:', response);\n            });\n            eventBus.send(phaseSessionKey, message, (response) => {\n                log('Registered for phase data.', 'Response:', response);\n            });\n        }\n    };\n\n    activityStatistics.ActivityProvider = ActivityProvider;\n})(golab.tools.activityStatistics);\n"],"sourceRoot":"/source/"}