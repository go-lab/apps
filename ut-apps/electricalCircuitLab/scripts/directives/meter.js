(function(){"use strict";var e,t,n,r,s;window.ut=window.ut||{},ut.simulations=ut.simulations||{},ut.simulations.electricity=ut.simulations.electricity||{},ut.simulations.electricity.meter=ut.simulations.electricity.meter||{},ut.simulations.electricity.meter.calculateSensorCenterOffset=function(e,t){var n,r,s,i,o;return o=function(e){var t;return t=e.indexOf("_"),{x:parseInt(e.substring(0,t)),y:parseInt(e.substr(t+1))}},s=o(e.cmpId1),i=o(e.cmpId2),n=(s.x+i.x)/2,r=(s.y+i.y)/2,{left:t/2+n*t,top:t/2+r*t}},n=function(){return{restrict:"E",template:'<div class=\'device meter\'>\n  <div class="iconLabel" draggable helper="clone" objectType="meter" objectId="{{powerSupply.getId()}}">\n    <div class=\'deviceIcon commonImage_{{meter.getType()}}Meter\'></div>\n    <div class=\'label\'>{{meter.getLabel()}}</div>\n  </div>\n  <div class=\'display\'>{{meter.getValue().display}}</div>\n  <span class=\'sensors\'>\n    <span ng-repeat=\'sensor in meter.getSensors()\'>\n      <span id="homeSensor_{{sensor.getId()}}"\n        class=\'sensor sensor_{{sensor.getType()}}{{sensor.getMeterNr()}} sensor{{sensor.getNr()}} sensorHole\'></span>\n      <sensor draggable Xhelper="clone" revert="invalid" Xng-hide="sensor.isPlaced()"></sensor>\n    </span>\n  </span>\n</div>',replace:!0,link:function(e,t,n){var r,s;return r=2,e.powerSupply&&(e.meter=e.powerSupply),s=e.meter.getUnit(),e.$watch("meter.getValue().display",function(t){return e.display=t}),e.getDragAndDropTransferObject=function(){return new ut.simulations.electricity.ElectricityLabDataSourceColumnDrop(e.meter.getDataSourceColumn())}}}},window.ut.simulations.electricity.circuitsimulator.directive("meter",[n]),t={sensor:null,dropped:!1},r=function(e){return function(t){return{restrict:"E",template:e,replace:!0,link:function(e,n,r){var s,i,o,a,c,l,u,d,g;return s=e.circuitModel.getCircuitSimulatorActionLogger(),o=ut.commons.utils.getBooleanAttributeValue(r,"onCircuit",!1),e.postionSensors&&o&&e.$watch("sensor.placeCounter",function(){if(e.sensor.isPlaced())return t(function(){var t,r,s;return r=n.parent().offset(),s=ut.simulations.electricity.meter.calculateSensorCenterOffset(e.sensor.getPlace(),e.completeSize),t={left:r.left+s.left-n.width()/2,top:r.top+s.top-n.height()/2},n.offset(t)})}),o||(d=function(){return e.sensor.isPlaced()?n.hide():n.show()},e.circuitModel.addListeners(["modelLoaded","modelCleared"],function(){return t(d)}),t(d),e.$watch("sensor.isPlaced()",function(e){if(!e)return n.show()})),c=0,l=0,i={},u=!1,e.objectDraggingStarted=function(){var t,r,s;return t=n.parent(),t.length>0&&(u||(r=t.offset(),s=n.offset(),c=s.left-r.left,l=s.top-r.top,i={left:r.left+c,top:r.top+l},u=!0)),e.sensor.setState(null)},e.objectDroppedOutside=function(t){var n;return e.circuitModel&&(n=e.circuitModel.getPlacedSensor(e.sensor.getId()),e.circuitModel.removeSensor(e.sensor),n&&s.logSensorRemove(e.sensor)),e.sensor.setState(null)},e.objectDraggingStopped=function(e){if(!o)return a(e)},a=function(e){if(n.offset(i),e.dropped)return n.hide()},g=function(){if(parent.length>0)return e.$watch("sensor.isPlaced()",function(e){var t,r;if(t=n.parent().offset(),!e)return r={left:t.left+c,top:t.top+l},n.offset(r),console.log("updateSensorPosition: element.offset("+JSON.stringify(r)+")")})},o&&setTimeout(function(){return g()},10),e.getDragAndDropTransferObject=function(){return null}}}}},s='<span class=\'sensor sensor_{{sensor.getType()}}{{sensor.getMeterNr()}} sensor{{sensor.getNr()}}\'\n   revertDuration="250" objectType="sensor" objectId="{{sensor.getId()}}"></span>\n',window.ut.simulations.electricity.circuitsimulator.directive("sensor",["$timeout",r(s)]),e="<div class=\"connectionPointState\">\n  <div ng-hide=\"config.polar\">\n    <div class='stateValue voltage'>{{ sensor.state.acVoltage.real | number:nrOfDigits }}</div>\n    <div class='stateValue voltage imaginary'>{{ sensor.state.acVoltage.imaginary | number:nrOfDigits }}</div>\n    <div class='stateValue current'>{{ sensor.state.acCurrent.real | number:nrOfDigits }}</div>\n    <div class='stateValue current imaginary'>{{ sensor.state.acCurrent.imaginary | number:nrOfDigits }}</div>\n  </div>\n  <div ng-show=\"config.polar\">\n    <div class='stateValue voltage'>{{ sensor.state.acVoltage.distance | number:nrOfDigits }}</div>\n    <div class='stateValue voltage imaginary'>{{ sensor.state.acVoltage.angle | number:nrOfDigits }}</div>\n    <div class='stateValue current'>{{ sensor.state.acCurrent.distance | number:nrOfDigits }}</div>\n    <div class='stateValue current imaginary'>{{ sensor.state.acCurrent.angle | number:nrOfDigits }}</div>\n  </div>\n</div>",window.ut.simulations.electricity.circuitsimulator.directive("connectionPointState".toLowerCase(),["$timeout",r(e)])}).call(this);
//# sourceMappingURL=meter.js.map
