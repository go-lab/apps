(function(){"use strict";var t=function(t,e){return function(){return t.apply(e,arguments)}},e=function(t,e){function n(){this.constructor=t}for(var c in e)o.call(e,c)&&(t[c]=e[c]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},o={}.hasOwnProperty;window.ut=window.ut||{},window.ut.tools=window.ut.tools||{},window.ut.tools.conceptmapper=window.ut.tools.conceptmapper||{},window.ut.tools.conceptmapper.ConceptMapModel=function(o){function n(e){this.applyLogAction=t(this.applyLogAction,this),this.removeRelation=t(this.removeRelation,this),this.changeRelationContent=t(this.changeRelationContent,this),this.removeConcept=t(this.removeConcept,this),this.changeConceptColor=t(this.changeConceptColor,this),this.changeConceptPosition=t(this.changeConceptPosition,this),this.changeConceptContent=t(this.changeConceptContent,this),this.addConcept=t(this.addConcept,this),this._clearContentInternal=t(this._clearContentInternal,this),this.clearContent=t(this.clearContent,this),this.loadFromResourceContent=t(this.loadFromResourceContent,this),this.getResourceContent=t(this.getResourceContent,this),n.__super__.constructor.call(this,e,"conceptMap"),this._clearContentInternal()}return e(n,o),n.prototype.createNewModel=function(){return new window.ut.tools.conceptmapper.ConceptMapModel(this.environmentHandlers)},n.prototype.getResourceContent=function(){return this._content},n.prototype.loadFromResourceContent=function(t){if(this.debug&&console.log("ConceptMapModel.loadFromResourceContent called."),this._clearContentInternal(),t.concepts&&(this._content.concepts=t.concepts),t.relations)return this._content.relations=t.relations},n.prototype.clearContent=function(){return this.debug&&console.log("ConceptMapModel.clearContent called."),this._clearContentInternal(),this.emitEvent("contentCleared"),this.emitModelChanged()},n.prototype._clearContentInternal=function(){return this._content={concepts:[],relations:[]}},n.prototype.isEmpty=function(){return 0===this._content.concepts.length},n.prototype.addConcept=function(t){return this._content.concepts.push(t),this.emitEvent("addConcept",[t]),this.emitModelChanged()},n.prototype.changeConceptContent=function(t,e){var o,n,c,i,r;for(i=this._content.concepts,r=[],n=0,c=i.length;n<c;n++){if(o=i[n],o.id===t){o.content=e,this.emitEvent("changeConceptContent",[t,e]),this.emitModelChanged();break}r.push(void 0)}return r},n.prototype.changeConceptPosition=function(t,e,o){var n,c,i,r,s;for(r=this._content.concepts,s=[],c=0,i=r.length;c<i;c++){if(n=r[c],n.id===t){n.x=e,n.y=o,this.emitEvent("changeConceptPosition",[t,e,o]),this.emitModelChanged();break}s.push(void 0)}return s},n.prototype.changeConceptColor=function(t,e){var o,n,c,i,r;for(i=this._content.concepts,r=[],n=0,c=i.length;n<c;n++){if(o=i[n],o.id===t){o.colorClass=e,this.emitEvent("changeConceptColor",[t,e]),this.emitModelChanged();break}r.push(void 0)}return r},n.prototype.removeConcept=function(t){return this.removeRelationsFromConcept(t),this._content.concepts=this._content.concepts.filter(function(e){return e.id!==t}),this.emitEvent("removeConcept",[t]),this.emitModelChanged()},n.prototype.addRelation=function(t){return this.conceptExists(t.source)&&this.conceptExists(t.target)?(this._content.relations.push(t),this.emitEvent("addRelation",[t]),this.emitModelChanged()):(console.warn("cannot add the following relation, source or target concept doesn't exist:"),console.warn(t))},n.prototype.changeRelationContent=function(t,e){var o,n,c,i,r;for(c=this._content.relations,r=[],o=0,n=c.length;o<n;o++){if(i=c[o],i.id===t){i.content=e,this.emitEvent("changeRelationContent",[t,e]),this.emitModelChanged();break}r.push(void 0)}return r},n.prototype.removeRelation=function(t){var e;if(e=this._content.relations.length,this._content.relations=this._content.relations.filter(function(e){return e.id!==t}),e!==this._content.relations.length)return this.emitEvent("removeRelation",[t]),this.emitModelChanged()},n.prototype.removeRelationsFromConcept=function(t){var e,o,n,c,i;for(n=this._content.relations,i=[],e=0,o=n.length;e<o;e++)c=n[e],c.source===t||c.target===t?i.push(this.removeRelation(c.id)):i.push(void 0);return i},n.prototype.removeRelationsBetween=function(t,e){var o,n,c,i,r;for(c=this._content.relations,r=[],o=0,n=c.length;o<n;o++)i=c[o],i.source===t&&i.target===e||i.source===e&&i.target===t?r.push(this.removeRelation(i.id)):r.push(void 0);return r},n.prototype.relationExists=function(t,e){var o,n,c,i;for(c=this._content.relations,o=0,n=c.length;o<n;o++)if(i=c[o],i.source===t&&i.target===e)return!0;return!1},n.prototype.relationExistsBetween=function(t,e){var o,n,c,i;for(c=this._content.relations,o=0,n=c.length;o<n;o++)if(i=c[o],i.source===t&&i.target===e||i.source===e&&i.target===t)return!0;return!1},n.prototype.getRelationsBetween=function(t,e){var o,n,c,i,r;for(r=[],c=this._content.relations,o=0,n=c.length;o<n;o++)i=c[o],(i.source===t&&i.target===e||i.source===e&&i.target===t)&&r.push(i);return r},n.prototype.conceptExists=function(t){var e,o,n,c;for(c=this._content.concepts,o=0,n=c.length;o<n;o++)if(e=c[o],e.id===t)return!0;return!1},n.prototype.applyLogAction=function(t,e){switch(this.debug&&console.log("applying log action:"),this.debug&&console.log(t),t.verb){case"add":switch(t.object.objectType){case"concept":this.addConcept(t.object);break;case"relation":this.addRelation(t.object);break;default:console.warn("ignoring unknown objectType "+t.object.objectType+" for verb "+t.verb)}break;case"remove":switch(t.object.objectType){case"concept":this.removeConcept(t.object.id);break;case"relation":this.removeRelation(t.object.id);break;default:console.warn("ignoring unknown objectType "+t.object.objectType+" for verb "+t.verb)}break;case"change":switch(t.object.objectType){case"concept":null!=t.object.content?this.changeConceptContent(t.object.id,t.object.content):null!=t.object.x?this.changeConceptPosition(t.object.id,t.object.x,t.object.y):null!=t.object.colorClass?this.changeConceptColor(t.object.id,t.object.colorClass):(console.warn("ignoring unknown change to concept:"),console.warn(t.object));break;case"relation":null!=t.object.content&&this.changeRelationContent(t.object.id,t.object.content);break;default:console.warn("ignoring unknown objectType "+t.object.objectType+" for verb "+t.verb)}break;default:n.__super__.applyLogAction.call(this,t,e)}return null!=e&&e(),this.emitEvent("logApplied")},n.prototype.applyLogAdd=function(t){var e,o,n,c,i,r;switch(console.log(t),t.object.objectType){case"concept":return null!=t.object.x&&null!=t.object.y?(i=t.object.x,r=t.object.y):(i=Math.floor(Math.random()*window.innerWidth+1),r=Math.floor(Math.random()*window.innerHeight+1)),null!=t.object.type&&null!=t.object.colorClass?(c=t.object.type,e=t.object.colorClass):(c="ut_tools_conceptmapper_conceptTextarea",e="ut_tools_conceptmapper_blue"),o={id:t.object.id,content:t.object.content,x:i,y:r,type:c,colorClass:e},this.addConcept(o);case"relation":return n={id:t.object.id,source:t.object.source,target:t.object.target,content:t.object.content},this.addRelation(n);default:return console.warn("don't know how to add a "+t.object.objectType)}},n.prototype.applyLogChange=function(t){switch(console.log("applying change: "),console.log(t),t.object.objectType){case"concept":return this.changeConceptContent(t.object.id,t.object.content);case"relation":return this.changeRelationContent(t.object.id,t.object.content),console.log("changing relation");default:return console.warn("don't know how to change a "+t.object.objectType)}},n.prototype.applyLogRemove=function(t){switch(console.log("applying remove: "),console.log(t),t.object.objectType){case"concept":return this.removeConcept(t.object.id);case"relation":return this.removeRelation(t.object.id);default:return console.warn("don't know how to remove a "+t.object.objectType)}},n}(window.ut.commons.ResourceEventEmitterModel)}).call(this);
//# sourceMappingURL=ConceptMapModel.js.map
